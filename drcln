#!/usr/bin/env Rscript
library(optparse)

dr.str = "

▓█████▄   ██▀███  ██   ██▓ ▄████▄   ██▓    ▓█████ ▄▄▄       ███▄    █
 ██▀ ██▌ ▓██   ██  ██  ██  ██▀ ▀█  ▓██▒    ▓█   ▀ ████▄     ██ ▀█   █
░██   █▌ ▓██ ░▄█    ██ ██  ▓█    ▄  ██░    ░███   ██  ▀█▄   ██  ▀█ ██▒
░▓█▄   ▌ ▒██▀▀█▄   ░ ▐██▓ ▒▓▓▄ ▄██▒ ██░    ░▓█  ▄ ██▄▄▄▄█   ██▒  ▐▌██▒
░▒████▓  ░██▓  ██  ░ ██▒    ▓███▀ ░░█████ ▒█████▒ █     █▒ ██░   ▓██░
 ▒ ▓  ▒  ░  ▓ ░▒▓░  ██    ░ ░▒ ▒  ░░ ▒░▓  ░░░ ▒░ ░▒▒   ▓▒█░░ ▒░   ▒ ▒
 ░ ▒  ▒    ░▒ ░  ░  ░░▒░   ░  ▒   ░ ░ ▒  ░ ░ ░  ░ ▒   ▒▒ ░░ ░░   ░ ▒░
 ░ ░  ░    ░░   ░   ░  ░░  ░          ░ ░  ░    ░    ░   ▒      ░   ░ ░
   ░        ░     ░ ░     ░ ░          ░  ░   ░  ░     ░  ░     ░   ░
 ░               ░ ░     ░       ░    ░     ░     ░      ░     ░ 


(Let's dryclean the genomes!)\n"




if (!exists('opt'))
    {
        option_list = list(
            make_option(c("-i", "--input"), type = "character", help = "Path to cov.rds file, fragCounter output for sample under consideration"),
            make_option(c("-p", "--pon"), type = "character", help = "Path to Panel Of Normal (PON) on which batch rPCA have been run. Within the file should be L, S matrices, estimated rank for burnin samples and svd decomposition matrices for the same"),
            make_option(c("-m", "--name"), default = TRUE, type = "character", help = "Sample / Individual name"),
            make_option(c("-b", "--blacklist"), default = FALSE, type = "logical", help = "blacklisted makers"),
            make_option(c("-w", "--wholeGenome"), default = TRUE, type = "logical", help = "If TRUE then it will process all chromosomes and parallelize it"),
            make_option(c("-C", "--chromosome"), default = NA, type = "character", help = "If wholeGenome is FALSE, specify the chromosome to process"),
            make_option(c("-g", "--germline.filter"), default = FALSE, type = "logical", help = "If PON based germline filter is to be used for removing some common germline events, If set to TRUE, give path to germline annotated file"),
            make_option(c("-f", "--germline.file"), default = NA, type = "character", help = "Path to file annotated with germline calls, if germline.filter == TRUE"),
            make_option(c("-c", "--cores"), type = "integer", default = 10,  help = "How many cores to use"),
            make_option(c("-F", "--field"), type = "character", default = 'reads.corrected', help = "Field name in GRanges metadata to use for drycleaning"),
            make_option(c("-B", "--build"), type = "character", default = 'hg19', help = "hg19/hg38 build for human samples"),
            make_option(c("-h", "--human"), type = "logical", default = TRUE, help = "Specify if the samples under consideration are human"),
            make_option(c("-o", "--outdir"), type = "character", default = './', help = "output directory"),
            make_option(c("-k", "--collapse"), type = "logical", default = FALSE, help = "collapse 200bp fragCounter to 1kb")
        )

        parseobj = OptionParser(option_list=option_list, add_help_option=FALSE)
        opt = parse_args(parseobj)

        if ((is.null(opt$input)) | is.null(opt$pon))
            stop(print_help(parseobj))

        options(error=function()traceback(2))

        ## keep record of run
        writeLines(paste(paste('--', names(opt), ' ', sapply(opt, function(x) paste(x, collapse = ',')), sep = '', collapse = ' '), sep = ''), paste(opt$outdir, 'cmd.args', sep = '/'))
        saveRDS(opt, paste(opt$outdir, 'cmd.args.rds', sep = '/'))
    }





system(paste('mkdir -p',  opt$outdir))

##############################
#suppressWarnings(suppressPackageStartupMessages(library(dryclean)))
        
        message(dr.str)
        
        suppressWarnings(suppressPackageStartupMessages(devtools::load_all()))
        
        dryclean_object = dryclean$new(
            pon_path = opt$pon,
            cov_path = opt$input
        )
        
        dryclean_object$start_wash_cycle(
            mc.cores = opt$cores,
            verbose = TRUE, 
            whole_genome = opt$wholeGenome,
            chr = opt$chromosome, 
            use.blacklist = opt$blacklist,
            germline.filter = opt$germline.filter,
            germline.file = opt$germline.file,
            field = opt$field
        )
        
        this.out = dryclean_object$get_drycleaned_cov()
        
        saveRDS(this.out, paste0(opt$outdir, 'drycleaned.cov.rds'))
        
        message('Giddy Up!') 

